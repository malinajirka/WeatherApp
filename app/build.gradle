apply plugin: 'com.android.application'

final VERSION_MAJOR = 1 // max two digits
final VERSION_MINOR = 0 // max two digits
final VERSION_PATCH = 0 // max two digits
final VERSION_BUILD = 0 // max three digits


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:20.0.0'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'com.google.android.gms:play-services:4.+'
    compile 'se.emilsjolander:sprinkles:1.3.0'
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'com.mcxiaoke.volley:library:1.0.6'
    compile 'com.crittercism:crittercism-android-agent:+'
    compile project(':CompPreferenceFragment')
}

android {
    compileSdkVersion 20
    buildToolsVersion '19.1.0'
    defaultConfig {
        applicationId 'cz.malinajiri.showcase.weatherapp'
        minSdkVersion 10
        targetSdkVersion 20
    }
    signingConfigs
            {
                release
                        {
                            // passwords and alias are obtained via askForPasswords task
                            storeFile file("../${project.property('keystore.file')}")
                            storePassword ""
                            keyAlias ""
                            keyPassword ""
                        }
            }
    buildTypes
            {
                debug
                        {
                            versionNameSuffix '-debug'
                        }
                release
                        {
                            signingConfig signingConfigs.release
                            zipAlign true
                            runProguard false
                            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                        }
            }
    applicationVariants.all
            {
                variant ->
                    if (variant.buildType.name.equals("release")) {
                        def file = variant.outputFile
                        def date = new Date()
                        variant.outputFile = new File(
                                (String) file.parent,
                                (String) file.name.replace(
                                        "app",
                                        "example-" + defaultConfig.versionName + "-" + defaultConfig.versionCode + "-" + date.format('yyyyMMdd')
                                )
                        )
                    }
            }
    productFlavors {
    }
}




task askForPasswords <<
        {
            def storePass
            def keyAlias
            def keyPass

            def keystorePropertiesFile = new File(project.property("keystore.properties"))

            if (project.hasProperty("keystore.properties") && keystorePropertiesFile.exists()) {
                println "Loading keystore passwords from property file..."
                Properties properties = new Properties()
                properties.load(new FileInputStream(keystorePropertiesFile))
                storePass = properties['keystore.store.password']
                keyAlias = properties['keystore.key.alias']
                keyPass = properties['keystore.key.password']
            } else {
                println "Getting keystore passwords from user input..."
                storePass = new String(System.console().readPassword("\nStore password: "))
                keyAlias = new String(System.console().readLine("Key alias: "))
                keyPass = new String(System.console().readPassword("Key password: "))
            }

            android.signingConfigs.release.storePassword = storePass
            android.signingConfigs.release.keyAlias = keyAlias
            android.signingConfigs.release.keyPassword = keyPass
        }


tasks.whenTaskAdded
        {
            theTask ->
                if (theTask.name.equals("packageRelease")) {
                    theTask.dependsOn "askForPasswords"
                }
        }



